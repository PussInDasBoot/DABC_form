/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = arrayToSentence;
/*!
 * array-to-sentence | ISC (c) Shinnosuke Watanabe
 * https://github.com/shinnn/array-to-sentence
*/
var OPTION_NAMES = ['separator', 'lastSeparator'];

function arrayToSentence(arr, options) {
	if (!Array.isArray(arr)) {
		throw new TypeError('Expected an array, but got a non-array value ' + arr + '.');
	}

	options = Object.assign({
		separator: ', ',
		lastSeparator: ' and ',
	}, options);

	for (var i = 0; i < 2; i++) {
		if (typeof options[OPTION_NAMES[i]] !== 'string') {
			throw new TypeError(
				'Expected `' +
				OPTION_NAMES[i] +
				'` option to be a string, but got a non-string value ' +
				options[OPTION_NAMES[i]] +
				'.'
			);
		}
	}

	if (arr.length === 0) {
		return '';
	}

	if (arr.length === 1) {
		return arr[0];
	}

	return arr.slice(0, -1).join(options.separator) + options.lastSeparator + arr[arr.length - 1];
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vision_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__speaking_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__hearing_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__eliminating_js__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__walking_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__feeding_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__feeding_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__feeding_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__dressing_js__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mentalfunctions_js__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mentalfunctions_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__mentalfunctions_js__);









document.addEventListener("DOMContentLoaded", function(e) {
    const submitButton = document.querySelector("#submit");
    submitButton.onclick = function() {
        Object(__WEBPACK_IMPORTED_MODULE_0__vision_js__["a" /* vision */])();
        Object(__WEBPACK_IMPORTED_MODULE_1__speaking_js__["a" /* speech */])();
        Object(__WEBPACK_IMPORTED_MODULE_2__hearing_js__["a" /* hearing */])();
        Object(__WEBPACK_IMPORTED_MODULE_3__eliminating_js__["a" /* eliminating */])();
        Object(__WEBPACK_IMPORTED_MODULE_4__walking_js__["a" /* walking */])();
        // feeding();
        Object(__WEBPACK_IMPORTED_MODULE_6__dressing_js__["a" /* dressing */])();
    }
    const accordions = document.getElementsByClassName("accordion");

    for (const acc of accordions) {
        acc.onclick = function(){
            /* Toggle between adding and removing the "active" class,
            to highlight the button that controls the panel */
            this.classList.toggle("active");

            /* Toggle between hiding and showing the active panel */
            const panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        }
    }

    document.addEventListener('change', function(event) {
        if (event.target.type == "radio") {
            showAndHideRadioTargets();
        }
        if (event.target.type == "checkbox" && checkboxTriggers[event.target.id]) {
            // on de-select of check box, can hide
            const id = event.target.id;
            if (event.target.checked) {
                document.querySelector(`#${checkboxTriggers[id]}`).removeAttribute("hidden");
                const value = [`${event.target.name}`, `${event.target.value}`];
            } else {
                document.querySelector(`#${checkboxTriggers[id]}`).setAttribute("hidden", true);
            }
        }
    })

    

    /*
    radio triggers need to check each radio in the group to hide pop ups when the trigger is no longer selected as there is no non-select event for radio buttons to listen for (the event is instead another radio in group being selected rather than the trigger being de-selected)
    */
    function showAndHideRadioTargets() {
        for (const [target, trigger] of Object.entries(radioTriggers)) {
            const targetEl = document.querySelector(`#${target}`);
            const triggerEl = document.querySelector(`input[name=${trigger[0]}]:checked`);
            if (triggerEl && triggerEl.value==`${trigger[1]}`) {
                targetEl.removeAttribute("hidden");
            } else {
                targetEl.setAttribute("hidden", true);
                for (const s of targetEl.querySelectorAll('input')) {
                    // clear target selection when trigger not selected
                    s.checked = false;
                }
            }
        }
    }
}, false);


// key is id of target element, value is array of trigger elements [name, value]
const radioTriggers = {
    visionRestrExplain: ["visionRestr", "severeRestr"],
    visionAble: ["visionRestr", "severeRestr"],
    visionTherapyExplain: ["visionTherapy", "yes"],
    visionResolveYear: ["visionResolve", "yes"],
    speechAble: ["speechRestr", "severeRestr"],
    speechTherapyAssist: ["speechTherapyYesNo", "yes"],
    speechResolveYear: ["speechResolve", "yes"],
    hearingAble: ["hearingRestr", "severeRestr"],
    hearingTherapyAssist: ["hearingTherapyYesNo", "yes"],
    hearingResolveYear: ["hearingResolve", "yes"],
    elimAble: ["elimRestr", "severeRestr"],
    elimTherapyAssist: ["elimTherapyYesNo", "yes"],
    elimResolveYear: ["elimResolve", "yes"],
    walkingRestr: ["walkingRestrAble", "able"],
    walkingAbleDescribe: ["walkingRestrAble", "able"],
    walkingTherapyAssist: ["walkingTherapyYesNo", "yes"],
    walkingResolveYear: ["walkingResolve", "yes"],
    eating: ["feedingRestr", "severeRestrEat"],
    eatingUnable: ["feedingRestr", "unableEat"],
    eatingTherapyAssist: ["eatingTherapyYesNo", "yes"],
    eatingResolveYear: ["eatingResolve", "yes"],
    preparing: ["feedingRestr", "severeRestrPrepare"],
    preparingUnable: ["feedingRestr", "unablePrepare"],
    preparingTherapyAssist: ["preparingTherapyYesNo", "yes"],
    preparingResolveYear: ["preparingResolve", "yes"],
    dressingRestr: ["dressingRestrAble", "able"],
    dressingAble: ["dressingRestrAble", "able"],
    dressingTherapyAssist: ["dressingTherapyYesNo", "yes"],
    dressingResolveYear: ["dressingResolve", "yes"],
    mentalCareExplain: ["mentalCare", "medication"],
    mentalResolveYear: ["mentalResolve", "yes"],
    lifeTherapyFreq: ["lifeTherapy14", "no"]
}


//key is id of trigger element, value is id of target element
const checkboxTriggers = {
    speechTherapyDevices: "speechDevices",
    speechTherapyTherapy: "speechTherapy",
    speechTherapyMedication: "speechMedication",
    hearingTherapyDevices: "hearingDevices",
    hearingTherapyTherapy: "hearingTherapy",
    hearingTherapyMedication: "hearingMedication",
    elimTherapyDevices: "elimDevices",
    elimTherapyTherapy: "elimTherapy",
    elimTherapyMedication: "elimMedication",
    walkingTherapyDevices: "walkingDevices",
    walkingTherapyTherapy: "walkingTherapy",
    walkingTherapyMedication: "walkingMedication",
    eatingTherapyDevices: "eatingDevices",
    eatingTherapyTherapy: "eatingTherapy",
    eatingTherapyMedication: "eatingMedication",
    preparingTherapyDevices: "preparingDevices",
    preparingTherapyTherapy: "preparingTherapy",
    preparingTherapyMedication: "preparingMedication",
    dressingTherapyDevices: "dressingDevices",
    dressingTherapyTherapy: "dressingTherapy",
    dressingTherapyMedication: "dressingMedication",
    mentalRestrSelf: "mentalSelf",
    mentalRestrSocial: "mentalSocial",
    mentalRestrTransactions: "mentalTransactions",
    mentalRestrMemory: "mentalMemory",
    mentalRestrProblem: "mentalProblem",
    mentalProblemSuicide: "mentalCrisisLine",
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = vision;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function vision() {
    let visionDiagnosis = ``;
    const visionDiagnosisEl = document.getElementById("visionMedicalCondition").value;
    if (visionDiagnosisEl) {
        visionDiagnosis = `I am diagnosed with ${visionDiagnosisEl}`;
    }

    let visionAble = '';
    if (document.getElementById("visionRestrUnable").checked) {
        visionAble = `I am legally blind, with a visual acuity of 20/200 or less with the Snellen Chart or field of vision in both eyes is 20 degrees or less.`;
    }
    let visionDescribe = ``;
    let visionLonger = ``;
    let visionDevice = ``;

    // Frequency of vision restrictions
    const visionLongerEl = document.querySelector('input[name=visionRestrFreq]:checked');
    if (visionLongerEl) {
        visionLonger = `I have significant restrictions in my vision `;
        visionLonger += `${visionLongerEl.nextElementSibling.innerText.toLowerCase()}`;
    }

    // Description of effects
    const visionDescribeEls = document.querySelectorAll('input[name=visionEffects]:checked');
    if (visionDescribeEls.length > 0) {
        visionDescribe = `I experience `;
        let visionDescribes = [];
        for (const wc of visionDescribeEls) {
            visionDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
        }
        visionDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(visionDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("visionTherapyNo").checked) {
        visionDevice = `No therapy, medication or devices corrects my restriction.`;
    }
    if (document.getElementById("visionTherapyYes").checked) {
        //visionDevices
        visionDevice = document.getElementById('visionTherapyExplainInput').value;
    }
        
    const visionBeginSelect = document.getElementById('visionBegin');
    let visionBegin = `My restriction began in ${visionBeginSelect.options[visionBeginSelect.selectedIndex].value}`;

    let visionResolve = ``;
    const visionResolveSelect = document.getElementById('visionResolveYearSelect');
    if (document.getElementById("visionResolveNo").checked) {
        visionResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("visionResolveYes").checked) {
        visionResolve = `My restriction resolved in ${visionResolveSelect.options[visionResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('visionYes').checked) {
        const email = document.getElementById("vision");
        email.innerHTML = `Vision:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const visionArray = [visionDiagnosis, visionAble, visionLonger, visionDescribe, visionDevice, visionBegin, visionResolve];
        for (const w of visionArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = speech;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function speech() {
    let speechDiagnosis = ``;
    const speechDiagnosisEl = document.getElementById("speechMedicalCondition").value;
    if (speechDiagnosisEl) {
        speechDiagnosis = `I am diagnosed with ${speechDiagnosisEl}`;
    }

    let speechAble = '';
    if (document.getElementById("speechRestrUnable").checked) {
        speechAble = `I am unable to speak and rely on other means of communication, such as sign language or a symbol board, at least 90% of the time.`;
    }
    if (document.getElementById("speechRestrSevere").checked) {
        speechAble = `I take longer to speak so as to be understood by another person familiar with me, in a quiet setting.`;
    }
    let speechDescribe = ``;
    let speechFreq = ``;
    let speechLonger = ``;
    let speechDevice = ``;
    let speechTherapy = ``;
    let speechMedication = ``;

    // Frequency of speech restrictions
    const speechFreqEl = document.querySelector('input[name=speechRestrFreq]:checked');
    if (speechFreqEl) {
        speechFreq = `This happens `;
        speechFreq += `${speechFreqEl.nextElementSibling.innerText.toLowerCase()}`;
    }

    // How much longer it takes them to speak
    const speechLongerEl = document.querySelector('input[name=speechLonger]:checked');
    if (speechLongerEl) {
        speechLonger = `When I speak with my doctor, my doctor must ask me to repeat words and sentences. It takes `;
        speechLonger += `${speechLongerEl.nextElementSibling.innerText.toLowerCase()} to communicate my needs.`;
    }


    // Description of restriction
    const speechDescribeEls = document.querySelectorAll('input[name=speechDescribe]:checked');
    if (speechDescribeEls.length > 0) {
        speechDescribe = `When I speak I suffer from `;
        let speechDescribes = [];
        for (const wc of speechDescribeEls) {
            if (wc.id=="speechDescribeOther") {
                speechDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                speechDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        speechDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(speechDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("speechTherapyNo").checked) {
        speechDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("speechTherapyYes").checked) {
        //speechDevices
        let speechDevices = document.querySelectorAll('input[name=speechDevices]:checked');
        if (speechDevices[0]) {
            let speechDevicesArray = [];
            speechDevice = `I require the use of `;
            for (const wd of speechDevices) {
                if (wd.id == "speechDevicesOther") {
                    speechDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                speechDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            speechDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(speechDevicesArray);
        }

        //speechTherapy
        let speechTherapies = document.querySelectorAll('input[name=speechTherapy]:checked');
        if (speechTherapies[0]) {
            let speechTherapiesArray = [];
            speechTherapy = `I require regular `;
            for (const wt of speechTherapies) {
                if (wt.id == "speechTherapyOther") {
                    speechTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    speechTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            speechTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(speechTherapiesArray);
        }

        //speechMedication
        if (document.getElementById('speechTherapyMedication').checked) {
            speechMedication = `I take ${document.getElementById("speechMedicationInput").value}`;
        }
    }
        
    const speechBeginSelect = document.getElementById('speechBegin');
    let speechBegin = `My restriction began in ${speechBeginSelect.options[speechBeginSelect.selectedIndex].value}`;

    let speechResolve = ``;
    const speechResolveSelect = document.getElementById('speechResolveYearSelect');
    if (document.getElementById("speechResolveNo").checked) {
        speechResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("speechResolveYes").checked) {
        speechResolve = `My restriction resolved in ${speechResolveSelect.options[speechResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('speechYes').checked) {
        const email = document.getElementById("speech");
        email.innerHTML = `Speech:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const speechArray = [speechDiagnosis, speechAble, speechFreq, speechLonger, speechDescribe, speechDevice,  speechTherapy, speechMedication, speechBegin, speechResolve];
        for (const w of speechArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = hearing;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function hearing() {
    let hearingDiagnosis = ``;
    const hearingDiagnosisEl = document.getElementById("hearingMedicalCondition").value;
    if (hearingDiagnosisEl) {
        hearingDiagnosis = `I am diagnosed with ${hearingDiagnosisEl}`;
    }

    let hearingAble = '';
    if (document.getElementById("hearingRestrUnable").checked) {
        hearingAble = `I am deaf/unable to hear and understand another person.`;
    }
    let hearingDescribe = ``;
    let hearingLonger = ``;
    let hearingDevice = ``;
    let hearingTherapy = ``;
    let hearingMedication = ``;

    // How much longer it takes them to speak
    const hearingLongerEl = document.querySelector('input[name=hearingLonger]:checked');
    if (hearingLongerEl) {
        hearingLonger = `I take `;
        hearingLonger += `${hearingLongerEl.nextElementSibling.innerText.toLowerCase()}, to hear and understand another person familiar with me, in a quiet setting.`;
    }


    // Description of restriction
    const hearingDescribeEls = document.querySelectorAll('input[name=hearingDescribe]:checked');
    if (hearingDescribeEls.length > 0) {
        let hearingDescribes = [];
        for (const wc of hearingDescribeEls) {
            if (wc.id=="hearingDescribeOther") {
                hearingDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                hearingDescribes.push(wc.nextElementSibling.innerText.toLowerCase().replace(/i\s/g, "I "));
            }
        }
        hearingDescribe = Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(hearingDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("hearingTherapyNo").checked) {
        hearingDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("hearingTherapyYes").checked) {
        //hearingDevices
        let hearingDevices = document.querySelectorAll('input[name=hearingDevices]:checked');
        if (hearingDevices[0]) {
            let hearingDevicesArray = [];
            hearingDevice = `I require the use of `;
            for (const wd of hearingDevices) {
                if (wd.id == "hearingDevicesOther") {
                    hearingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                hearingDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            hearingDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(hearingDevicesArray);
        }

        //hearingTherapy
        let hearingTherapies = document.querySelectorAll('input[name=hearingTherapy]:checked');
        if (hearingTherapies[0]) {
            let hearingTherapiesArray = [];
            hearingTherapy = `I require regular `;
            for (const wt of hearingTherapies) {
                if (wt.id == "hearingTherapyOther") {
                    hearingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    hearingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            hearingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(hearingTherapiesArray);
        }

        //hearingMedication
        if (document.getElementById('hearingTherapyMedication').checked) {
            hearingMedication = `I take ${document.getElementById("hearingMedicationInput").value}`;
        }
    }
        
    const hearingBeginSelect = document.getElementById('hearingBegin');
    let hearingBegin = `My restriction began in ${hearingBeginSelect.options[hearingBeginSelect.selectedIndex].value}`;

    let hearingResolve = ``;
    const hearingResolveSelect = document.getElementById('hearingResolveYearSelect');
    if (document.getElementById("hearingResolveNo").checked) {
        hearingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("hearingResolveYes").checked) {
        hearingResolve = `My restriction resolved in ${hearingResolveSelect.options[hearingResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('hearingYes').checked) {
        const email = document.getElementById("hearing");
        email.innerHTML = `Hearing:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const hearingArray = [hearingDiagnosis, hearingAble, hearingLonger, hearingDescribe, hearingDevice,  hearingTherapy, hearingMedication, hearingBegin, hearingResolve];
        for (const w of hearingArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = eliminating;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function eliminating() {
    let elimDiagnosis = ``;
    const elimDiagnosisEl = document.getElementById("elimMedicalCondition").value;
    if (elimDiagnosisEl) {
        elimDiagnosis = `I am diagnosed with ${elimDiagnosisEl}`;
    }

    let elimAble = '';
    if (document.getElementById("elimRestrUnable").checked) {
        elimAble = `I am incontinent and unable to manage my elimination.`;
    }
    let elimDescribe = ``;
    let elimLonger = ``;
    let elimFreq = ``;
    let elimDevice = ``;
    let elimTherapy = ``;
    let elimMedication = ``;

    // How much longer it takes them to speak
    const elimLongerEl = document.querySelector('input[name=elimLonger]:checked');
    if (elimLongerEl) {
        elimLonger = `I take `;
        elimLonger += `${elimLongerEl.nextElementSibling.innerText.toLowerCase()}, to manage my elimination.`;
    }

    // Frequency of restrictions
    const elimFreqEl = document.querySelector('input[name=elimRestrFreq]:checked');
    if (elimFreqEl) {
        elimFreq = `This happens `;
        elimFreq += `${elimFreqEl.nextElementSibling.innerText.toLowerCase()}`;
    }


    // Description of restriction
    const elimDescribeEls = document.querySelectorAll('input[name=elimDescribe]:checked');
    if (elimDescribeEls.length > 0) {
        elimDescribe = `I have the following: `;
        let elimDescribes = [];
        for (const wc of elimDescribeEls) {
            if (wc.id=="elimDescribeOther") {
                elimDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                elimDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        elimDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(elimDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("elimTherapyNo").checked) {
        elimDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("elimTherapyYes").checked) {
        //elimDevices
        let elimDevices = document.querySelectorAll('input[name=elimDevices]:checked');
        if (elimDevices[0]) {
            let elimDevicesArray = [];
            elimDevice = `I require the use of `;
            for (const wd of elimDevices) {
                if (wd.id == "elimDevicesOther") {
                    elimDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                elimDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            elimDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(elimDevicesArray);
        }

        //elimTherapy
        let elimTherapies = document.querySelectorAll('input[name=elimTherapy]:checked');
        if (elimTherapies[0]) {
            let elimTherapiesArray = [];
            elimTherapy = `I require regular `;
            for (const wt of elimTherapies) {
                if (wt.id == "elimTherapyOther") {
                    elimTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    elimTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            elimTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(elimTherapiesArray);
        }

        //elimMedication
        if (document.getElementById('elimTherapyMedication').checked) {
            elimMedication = `I take ${document.getElementById("elimMedicationInput").value}`;
        }
    }
        
    const elimBeginSelect = document.getElementById('elimBegin');
    let elimBegin = `My restriction began in ${elimBeginSelect.options[elimBeginSelect.selectedIndex].value}`;

    let elimResolve = ``;
    const elimResolveSelect = document.getElementById('elimResolveYearSelect');
    if (document.getElementById("elimResolveNo").checked) {
        elimResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("elimResolveYes").checked) {
        elimResolve = `My restriction resolved in ${elimResolveSelect.options[elimResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('elimYes').checked) {
        const email = document.getElementById("eliminating");
        email.innerHTML = `Eliminating:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const elimArray = [elimDiagnosis, elimAble, elimLonger, elimFreq, elimDescribe, elimDevice,  elimTherapy, elimMedication, elimBegin, elimResolve];
        for (const w of elimArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = walking;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function walking() {
    let walkingDiagnosis = ``;
    const walkingDiagnosisEl = document.getElementById("walkingMedicalCondition").value;
    if (walkingDiagnosisEl) {
        walkingDiagnosis = `I am diagnosed with ${walkingDiagnosisEl}`;
    }

    let walkingAble = '';
    if (document.getElementById("walkingRestrUnable").checked) {
        walkingAble = `I am unable to walk`;
    }
    let walkingDescribe = ``;
    let walkingLonger = ``;
    let walkingFreq = ``;
    let walkingDevice = ``;
    let walkingTherapy = ``;
    let walkingMedication = ``;

    // Walking restrictions
    const walkingRestrEls = document.querySelectorAll('input[name=walkingRestr]:checked');
    if (walkingRestrEls.length > 0) {
        let walkingRestrictions = [];
        walkingAble = `I am restricted in `;
        for (const wr of walkingRestrEls) {
            if (wr.id=="walkingRestrOther") {
                walkingRestrictions.push(wr.nextElementSibling.nextElementSibling.value);
            } else {
                walkingRestrictions.push(letterText[wr.id]);
            }
        }
        walkingAble += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingRestrictions);
    }

    // Causes of restriction
    const walkingDescribeEls = document.querySelectorAll('input[name=walkingDescribe]:checked');
    if (walkingDescribeEls.length > 0) {
        walkingDescribe = `I am restricted by `;
        let walkingDescribes = [];
        for (const wc of walkingDescribeEls) {
            if (wc.id=="walkingDescribeOther") {
                walkingDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                walkingDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        walkingDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingDescribes);
    }

    // How much longer it takes them to walk
    const walkingLongerEl = document.querySelector('input[name=walkingLonger]:checked');
    if (walkingLongerEl) {
        walkingLonger = `I require`;
        walkingLonger += `${walkingLongerEl.nextElementSibling.innerText.substring('I take'.length)} to walk a flight of stairs or one block compared to an average person my age without my condition`;
    }

    // How frequently they have to stop and rest
    if (document.querySelector('input[name=walkingFreq]:checked')) {
        walkingFreq = `I need to stop and rest`;
        walkingFreq += ` ${document.querySelector('input[name=walkingFreq]:checked').nextElementSibling.innerText.toLowerCase()} while walking`;
    }

    // Use of therapy, medication or devices
    if (document.getElementById("walkingTherapyYes").checked) {
        //walkingDevices
        let walkingDevices = document.querySelectorAll('input[name=walkingDevices]:checked');
        if (walkingDevices[0]) {
            let walkingDevicesArray = [];
            walkingDevice = `I require the use of `;
            for (const wd of walkingDevices) {
                if (wd.id == "walkingDevicesOther") {
                    walkingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                walkingDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            walkingDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingDevicesArray);
        }

        //walkingTherapy
        let walkingTherapies = document.querySelectorAll('input[name=walkingTherapy]:checked');
        if (walkingTherapies[0]) {
            let walkingTherapiesArray = [];
            walkingTherapy = `I require regular `;
            for (const wt of walkingTherapies) {
                if (wt.id == "walkingTherapyOther") {
                    walkingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    walkingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            walkingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingTherapiesArray);
        }

        //walkingMedication
        if (document.getElementById('walkingTherapyMedication').checked) {
            walkingMedication = `I take ${document.getElementById("walkingMedicationInput").value}`;
        }
    }
        
    const walkingBeginSelect = document.getElementById('walkingBegin');
    let walkingBegin = `My restriction began in ${walkingBeginSelect.options[walkingBeginSelect.selectedIndex].value}`;

    let walkingResolve = ``;
    const walkingResolveSelect = document.getElementById('walkingResolveYearSelect');
    if (document.getElementById("walkingResolveNo").checked) {
        walkingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("walkingResolveYes").checked) {
        walkingResolve = `My restriction resolved in ${walkingResolveSelect.options[walkingResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('walkingYes').checked) {
        const email = document.getElementById("walking");
        email.innerHTML = `Walking:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const walkingArray = [walkingDiagnosis, walkingAble, walkingDescribe, walkingLonger, walkingFreq, walkingDevice,  walkingTherapy, walkingMedication, walkingBegin, walkingResolve];
        for (const w of walkingArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

//key is id of selected option, value is text to display
const letterText = {
        walkingRestrSlow: "walking slowly",
        walkingRestrRest: "needing to stop and rest frequently",
        walkingRestrStairs: "walking up/down stairs",
        walkingRestrIncline: "walking up/down inclines",
    }

/***/ }),
/* 7 */
/***/ (function(module, exports) {



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = dressing;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function dressing() {
    let dressingDiagnosis = ``;
    const dressingDiagnosisEl = document.getElementById("dressingMedicalCondition").value; 
    if (dressingDiagnosisEl) {
        dressingDiagnosis = `I am diagnosed with ${dressingDiagnosisEl}`;
    }

    let dressingAble = ``;
    if (document.getElementById("dressingRestrUnable").checked) {
        dressingAble = `I am unable to dress without assistance`;
    }
    let dressingRestr = ``;
    let dressingDescribe = ``;
    let dressingDifficult = ``;
    let dressingDevice = ``;
    let dressingTherapy = ``;
    let dressingMedication = ``;
    
    // Dressing restrictions
    const dressingRestrEl = document.querySelector('input[name=dressingRestr]:checked');
    if (dressingRestrEl) {
        dressingRestr = `I require `;
        dressingRestr += `${dressingRestrEl.nextElementSibling.innerText.substring('I take'.length)} to dress`;
    }

    // Cause of restriction
    const dressingRestrEls = document.querySelectorAll('input[name=dressingDescribe]:checked');
    if (dressingRestrEls.length > 0) {
        dressingDescribe = `I am restricted by `;
        let dressingDescribes = [];
        for (const dd of document.querySelectorAll('input[name=dressingDescribe]:checked')) {
            dressingDescribes.push(dd.nextElementSibling.innerText.toLowerCase());
        }
        dressingDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingDescribes);
    }

    // What is difficult
    const dressingDifficultEls = document.querySelectorAll('input[name=dressingDifficult]:checked');
    if (dressingDifficultEls.length > 0) {
        dressingDifficult = `I have difficulty putting on the following articles of clothing: `
        let dressingDifficults = [];
        for (const dd of document.querySelectorAll('input[name=dressingDifficult]:checked')) {
            dressingDifficults.push(dd.nextElementSibling.innerText.toLowerCase());
        }
        dressingDifficult += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingDifficults);
    }

    // Use of therapy, medication or devices
    if (document.getElementById("dressingTherapyYes").checked) {
        //dressingDevices
        let dressingDevices = document.querySelectorAll('input[name=dressingDevices]:checked');
        if (dressingDevices[0]) {
            let dressingDevicesArray = [];
            dressingDevice = `I require the use of `;
            for (const wd of dressingDevices) {
                if (wd.id == "dressingDevicesOther") {
                    dressingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                dressingDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            dressingDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingDevicesArray);
        }

        //dressingTherapy
        let dressingTherapies = document.querySelectorAll('input[name=dressingTherapy]:checked');
        if (dressingTherapies[0]) {
            let dressingTherapiesArray = [];
            dressingTherapy = `I require regular `;
            for (const wt of dressingTherapies) {
                if (wt.id == "dressingTherapyOther") {
                    dressingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    dressingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            dressingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingTherapiesArray);
        }

        //dressingMedication
        if (document.getElementById('dressingTherapyMedication').checked) {
            dressingMedication = `I takes ${document.getElementById("dressingMedicationInput").value}`;
        }
    }

    const dressingBeginSelect = document.getElementById('dressingBegin');
    let dressingBegin = `My restriction began in ${dressingBeginSelect.options[dressingBeginSelect.selectedIndex].value}`;

    let dressingResolve = ``;
    const dressingResolveSelect = document.getElementById('dressingResolveYearSelect');
    if (document.getElementById("dressingResolveNo").checked) {
        dressingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("dressingResolveYes").checked) {
        dressingResolve = `My restriction resolved in ${dressingResolveSelect.options[dressingResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('dressingYes').checked) {
        const email = document.getElementById("dressing");
        email.innerHTML = `Dressing:`;
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const dressingArray = [dressingDiagnosis, dressingAble, dressingRestr, dressingDescribe, dressingDifficult, dressingDevice,  dressingTherapy, dressingMedication, dressingBegin, dressingResolve];
        for (const d of dressingArray) {
            if (d) {
                const li = document.createElement("li");
                li.innerHTML = d;
                ul.appendChild(li);
            }
        }
    }
};

/***/ }),
/* 9 */
/***/ (function(module, exports) {



/***/ })
/******/ ]);