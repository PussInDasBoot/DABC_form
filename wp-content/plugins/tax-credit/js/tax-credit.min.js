/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = arrayToSentence;
/*!
 * array-to-sentence | ISC (c) Shinnosuke Watanabe
 * https://github.com/shinnn/array-to-sentence
*/
var OPTION_NAMES = ['separator', 'lastSeparator'];

function arrayToSentence(arr, options) {
	if (!Array.isArray(arr)) {
		throw new TypeError('Expected an array, but got a non-array value ' + arr + '.');
	}

	options = Object.assign({
		separator: ', ',
		lastSeparator: ' and ',
	}, options);

	for (var i = 0; i < 2; i++) {
		if (typeof options[OPTION_NAMES[i]] !== 'string') {
			throw new TypeError(
				'Expected `' +
				OPTION_NAMES[i] +
				'` option to be a string, but got a non-string value ' +
				options[OPTION_NAMES[i]] +
				'.'
			);
		}
	}

	if (arr.length === 0) {
		return '';
	}

	if (arr.length === 1) {
		return arr[0];
	}

	return arr.slice(0, -1).join(options.separator) + options.lastSeparator + arr[arr.length - 1];
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vision_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__speaking_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__hearing_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__eliminating_js__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__walking_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__feeding_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__dressing_js__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mentalfunctions_js__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__life_js__ = __webpack_require__(10);










document.addEventListener("DOMContentLoaded", function(e) {
    const submitButton = document.querySelector("#submit");
    submitButton.onclick = function(e) {
        e.preventDefault();
        const elements = ["vision", "speech", "hearing", "eliminating", "walking", "feeding", "dressing", "mental", "life"];
        for (const el of elements) {
            document.getElementById(el).innerHTML = ``;
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__vision_js__["a" /* vision */])();
        Object(__WEBPACK_IMPORTED_MODULE_1__speaking_js__["a" /* speech */])();
        Object(__WEBPACK_IMPORTED_MODULE_2__hearing_js__["a" /* hearing */])();
        Object(__WEBPACK_IMPORTED_MODULE_3__eliminating_js__["a" /* eliminating */])();
        Object(__WEBPACK_IMPORTED_MODULE_4__walking_js__["a" /* walking */])();
        Object(__WEBPACK_IMPORTED_MODULE_5__feeding_js__["a" /* feeding */])();
        Object(__WEBPACK_IMPORTED_MODULE_6__dressing_js__["a" /* dressing */])();
        Object(__WEBPACK_IMPORTED_MODULE_7__mentalfunctions_js__["a" /* mental */])();
        Object(__WEBPACK_IMPORTED_MODULE_8__life_js__["a" /* life */])();

        const emailData = document.querySelector("#email").innerHTML;

        const monthNames = ["January", "February", "March", "April", "May", "June",
          "July", "August", "September", "October", "November", "December"
        ];

        const d = new Date();

        let sections = [];
        
        for (const el of elements) {
            if (document.getElementById(el).innerHTML != "") {
                switch(el) {
                    case "mental":
                        sections.push("Mental functions necessary for everyday life")
                        break;
                    case "life":
                        sections.push("Life-sustaining therapy")
                        break;
                    default:
                        sections.push(el.charAt(0).toUpperCase() + el.slice(1));
                }
            }
        }

        let cumulativeEffect = "";
        if (sections.length > 1) {
            sections.push("Cumulative effect of significant restrictions")
            cumulativeEffect = `
            <b>Cumulative effect of significant restrictions</b>
            <p>
                This category may apply for patients who experience multiple significant restrictions in basic daily living activities to qualify. According to the CRA guidelines, cumulative effect of significant restrictions means:
                <ul>
                    <li>
                        a person is significantly restricted in two or more basic activities of daily living, even with appropriate therapy, medication, and devices;
                    </li>
                    <li>
                        these significant restrictions exist together all or substantially all the time (at least 90% of the time) and,
                    </li>
                    <li>
                        the cumulative effect of these significant restrictions is equivalent to being markedly restricted in a single basic activity of daily living.
                    </li>
                </ul>
            </p>
            `
        }
        
        let eligibilityCriteria = "";
        for (const section of sections) {
            eligibilityCriteria += `<li>${section}</li>`;
        }

        const emailGeneric = `
            <h2>Next Steps for Disability Tax Credit (DTC) Application</h2>
     
            <p>
                You are receiving this email because you used Access RDSP’s Disability Tax Credit Web Tool. This email contains a letter to your health care provider and a summary of your restrictions that are relevant to the Disability Tax Credit Application.
            </p>

            <p>
                To complete preparing for discussing the Disability Tax Credit with your healthcare provider please:
            </p>
            <ul>
                <li>
                    Print out the Disability Tax Credit Application T2001 located online here: https://www.canada.ca/en/revenue-agency/services/forms-publications/forms/t2201.html
                </li>
                <li>
                    Complete page 1 of the document by filling in your information.
                </li>
                <li>
                    If you have a family member who lives with you or who regularly helps you with housing, food or clothing, they can claim the Disability Amount by filling out Section 2
                </li>
            </ul>
             
            <b>Instructions</b>
            <ol>
                <li>
                    Make an appointment to see your doctor or other qualified medical professional to fill out the rest of the Disability Tax Credit Certificate. You may want to ask if there is a fee to complete the form.
                </li>
                <li>
                    Take the DTC application and the attached supporting documents to your appointment. Take time to discuss how your disability impacts you and why you are applying for the DTC.
                </li>
                <li>
                    Once your medical professional fills out the DTC Certificate, check to make sure each applicable section was completed, especially pages 5 and 6.
                </li>
                <li>
                    Make a copy of your DTC application and supporting documents for your records and note the date you mailed it. Consider taking a picture of the completed document and emailing it to yourself if you do not have access to a photocopier.
                </li>
                <li>
                    Mail your completed DTC application and any other supporting documentation to the CRA. DO NOT include the letter addressed to your health care provider, unless they have signed the “Effects of Impairment” page. If they choose to sign this page, please mail only this page along with the form.
            
                    <p>
                        For Residents of BC, mail the completed application to:
                            <p style="margin-left: 40px">
                                Disability Tax Credit Unit<br>
                                Winnipeg Tax Centre<br>
                                66 Stapon Rd.<br>
                                Winnipeg MB, R3C 3M2<br>
                            </p>
                    </p>
                </li>
                <li>
                    If you are approved consider opening a Registered Disability Savings Plan. To learn if you are eligible, or to receive additional free assistance, call Access RDSP: 1-844-311-7526.
                </li>
            </ol>
            <p>
                Below is a letter to provide to your medical professional. Please complete the section with your information (name and DOB).
            </p>
            <hr>
            <p>${monthNames[d.getMonth()]} ${d.getDate()} ${d.getFullYear()}</p>
             
            <p>Dear Dr. _________,/Dear NP/Dear OT/ETC</p>
             
            <p>
                <b>
                    Re:     (Client Name), DOB: (DD/MMM/YYYY)<br>
                    Disability Tax Credit Application
                </b>
            </p>
             
            <p>
                Your patient has completed an online tool designed to assist them in applying for the Disability Tax Credit (DTC). This tool was created by Access RDSP, a non-profit partnership that supports individuals to apply for the Disability Tax Credit in order to open a Registered Disability Savings Plan (RDSP). The RDSP is a financial empowerment tool for people with disabilities. Low income individuals may qualify for up to $1,000 annually from the federal government by opening a plan. No personal contributions are required.
            </p>

            <p>
                Your patient would like to request your help with completing the forms required for the application. To assist your consultation, the tool has prompted your patient to detail their restrictions that are most relevant to the DTC Certificate form. <b>The draft summary of effects prepared is <u>not</u> intended to replace your medical opinion.</b>
            </p>
             
            <p>
                <b>Eligibility Criteria</b>
                <p>
                    Based on our conversation with your patient, we believe they may qualify under the following categories:
                    <ul>
                        ${eligibilityCriteria}
                    </ul>
                    <b>(Note that they only need to qualify under one category)</b>
                </p>
            </p>
            
            <p> 
                <b>Effects of Impairment</b>
                <p>
                    Enclosed is a summary of your patient’s description of the daily effects of their impairment, as they relate to the DTC criteria. <b>These examples are to assist you in completing the “Effects of Impairment” section on page 5. However, should you find the summary a reasonable representation of the effects of your patient’s impairment, please:</b>
                    <ul>
                        <li>Indicate “See attached” under Effects of Impairment on page 5</li>
                        <li>Sign at the bottom of each page to be attached</li>
                        <li>Staple the additional pages to the DTC application</li>
                    </ul>
                </p>
             
            <p>
                <b>Notes about Eligibility Criteria</b>
                <p>
                    <ul>
                        <li>Individuals only need to qualify under ONE category</li>
                        <li>Diagnosis/medical condition alone is insufficient for determining eligibility</li>
                        <li>Detailed daily effects of impairment are the key to determining eligibility</li>
                        <li>Ability to work or drive is unrelated to an individual’s eligibility for the DTC</li>
                    </ul>
                </p>
            </p>

            <p>
            ${cumulativeEffect}
            </p>

            <p>
                <b>Follow Up Questionnaire from CRA</b>
                <p>
                    The CRA frequently requests additional information regarding the applicant in a follow-up questionnaire specific to each patient. In this questionnaire the CRA may request that you share examples from your patient’s life explaining how they require additional time or are unable to complete certain activities. The CRA may ask you to verify that your patient experiences their restriction(s) at least 90% of the time and that the restrictions are severe. You may need to repeat previously submitted information. Please refer back to the sample description of effects to assist you in completing the questionnaire.
                </p>
            </p>
                 
            <p>
                <b>Fees</b>
                <p>
                    Thank you kindly for taking the time to assist your patient with the DTC application. We note that your patient may be limited in their ability to pay out-of-pocket costs. We ask that you please consider this when determining your fee for having the application completed.
                </p>
            </p>

            <p>
                <b>Disability Tax Credit Support</b>
                <p>
                    We provide free supports and services for physicians, nurse practitioners, occupational therapists and other qualified health professionals to complete the DTC.
                </p>
                <p>
                    Call toll-free: 1-800-663-1278 or email: rdsp@disabilityalliancebc.org
                </p>
            </p>
             
            <p>
                <b>RDSP Support</b>
                <p>
                    <ul>
                        <li>For assistance in opening an RDSP</li>
                        <li>Specialized support and navigation for Indigenous peoples</li>
                        <li>RDSP & Disability Planning Helpline</li>
                        <li>RDSP & DTC Info sessions for individuals, organizations and professionals</li>
                        <li>$150 grant for children, youth and low-income adults residents</li>
                    </ul>
                </p>
            </p>
            
            <p>
                For more information on these services:<br>
                Call: 1-844-311-7526<br>
                Email: info@rdsp.com<br>
                Visit: www.rdsp.com<br>
            </p>
            <hr>
            <h2>Disability Tax Credit Application Supplement: Effects of Impairment</h2>

             
            <b>
                Re:     (Client Name), DOB: (DD/MMM/YYYY)<br>
                Disability Tax Credit Application<br>
            </b>

            <p>
                ${emailData}
            </p>

            Name of Medical Practitioner: _____________________________________________<br>

 
            Medical Practitioner’s Signature: ___________________   Date: ________________

            `

        const ajaxurl = './tax-credit.php',
        data =  {
            'emailAddress': document.querySelector("#emailAddress").value,
            'email': emailGeneric,
        };
        const thankyou = document.querySelector("#notice");
        if (sections.length > 0) {
            jQuery.post(ajaxurl, data, function (response) {
               notice.innerHTML = `<p>
                    Thank you for submitting your form! If you have not received your email, please make sure to check your spam folder.
                    </p>`
                notice.style.display = "block";
            });
        } else {
            notice.innerHTML = `<p>Please indicate a section you have a restriction with before submitting!</p>`;
            notice.style.display = "block";
        }
    }

    const accordions = document.getElementsByClassName("accordion");

    for (const acc of accordions) {
        acc.onclick = function(){
            /* Toggle between adding and removing the "active" class,
            to highlight the button that controls the panel */
            this.classList.toggle("active");

            /* Toggle between hiding and showing the active panel */
            const panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        }
    }

    document.addEventListener('change', function(event) {
        if (event.target.type == "radio") {
            showAndHideRadioTargets();
        }
        if (event.target.type == "checkbox" && checkboxTriggers[event.target.id]) {
            // on de-select of check box, can hide
            const id = event.target.id;
            if (event.target.checked) {
                document.querySelector(`#${checkboxTriggers[id]}`).removeAttribute("hidden");
                const value = [`${event.target.name}`, `${event.target.value}`];
            } else {
                document.querySelector(`#${checkboxTriggers[id]}`).setAttribute("hidden", true);
            }
        }
    })
    

    /*
    radio triggers need to check each radio in the group to hide pop ups when the trigger is no longer selected as there is no non-select event for radio buttons to listen for (the event is instead another radio in group being selected rather than the trigger being de-selected)
    */
    function showAndHideRadioTargets() {
        for (const [target, trigger] of Object.entries(radioTriggers)) {
            const targetEl = document.querySelector(`#${target}`);
            const triggerEl = document.querySelector(`input[name=${trigger[0]}]:checked`);
            if (triggerEl && triggerEl.value==`${trigger[1]}`) {
                targetEl.removeAttribute("hidden");
            } else {
                targetEl.setAttribute("hidden", true);
                for (const s of targetEl.querySelectorAll('input')) {
                    // clear target selection when trigger not selected
                    s.checked = false;
                }
            }
        }
    }
}, false);


// key is id of target element, value is array of trigger elements [name, value]
const radioTriggers = {
    visionRestrExplain: ["visionRestr", "severeRestr"],
    visionAble: ["visionRestr", "severeRestr"],
    visionTherapyExplain: ["visionTherapy", "yes"],
    visionResolveYear: ["visionResolve", "yes"],
    speechAble: ["speechRestr", "severeRestr"],
    speechTherapyAssist: ["speechTherapyYesNo", "yes"],
    speechResolveYear: ["speechResolve", "yes"],
    hearingAble: ["hearingRestr", "severeRestr"],
    hearingTherapyAssist: ["hearingTherapyYesNo", "yes"],
    hearingResolveYear: ["hearingResolve", "yes"],
    elimAble: ["elimRestr", "severeRestr"],
    elimTherapyAssist: ["elimTherapyYesNo", "yes"],
    elimResolveYear: ["elimResolve", "yes"],
    walkingRestr: ["walkingRestrAble", "able"],
    walkingAbleDescribe: ["walkingRestrAble", "able"],
    walkingTherapyAssist: ["walkingTherapyYesNo", "yes"],
    walkingResolveYear: ["walkingResolve", "yes"],
    eating: ["feedingRestr", "severeRestrEat"],
    eatingUnable: ["feedingRestr", "unableEat"],
    eatingTherapyAssist: ["eatingTherapyYesNo", "yes"],
    eatingResolveYear: ["eatingResolve", "yes"],
    eatingResolveYearUnable: ["eatingResolveUnable", "yes"],
    preparing: ["feedingRestr", "severeRestrPrepare"],
    preparingUnable: ["feedingRestr", "unablePrepare"],
    preparingTherapyAssist: ["preparingTherapyYesNo", "yes"],
    preparingResolveYear: ["preparingResolve", "yes"],
    preparingResolveYearUnable: ["preparingResolveUnable", "yes"],
    dressingRestr: ["dressingRestrAble", "able"],
    dressingAble: ["dressingRestrAble", "able"],
    dressingTherapyAssist: ["dressingTherapyYesNo", "yes"],
    dressingResolveYear: ["dressingResolve", "yes"],
    mentalCareYesExplain: ["mentalCareYesNo", "yes"],
    mentalResolveYear: ["mentalResolve", "yes"],
    lifeTherapyFreq: ["lifeTherapy14", "yes"]
}


//key is id of trigger element, value is id of target element
const checkboxTriggers = {
    speechTherapyDevices: "speechDevices",
    speechTherapyTherapy: "speechTherapy",
    speechTherapyMedication: "speechMedication",
    hearingTherapyDevices: "hearingDevices",
    hearingTherapyTherapy: "hearingTherapy",
    hearingTherapyMedication: "hearingMedication",
    elimTherapyDevices: "elimDevices",
    elimTherapyTherapy: "elimTherapy",
    elimTherapyMedication: "elimMedication",
    walkingTherapyDevices: "walkingDevices",
    walkingTherapyTherapy: "walkingTherapy",
    walkingTherapyMedication: "walkingMedication",
    eatingTherapyDevices: "eatingDevices",
    eatingTherapyTherapy: "eatingTherapy",
    eatingTherapyMedication: "eatingMedication",
    preparingTherapyDevices: "preparingDevices",
    preparingTherapyTherapy: "preparingTherapy",
    preparingTherapyMedication: "preparingMedication",
    dressingTherapyDevices: "dressingDevices",
    dressingTherapyTherapy: "dressingTherapy",
    dressingTherapyMedication: "dressingMedication",
    mentalRestrSelf: "mentalSelf",
    mentalRestrSocial: "mentalSocial",
    mentalRestrTransactions: "mentalTransactions",
    mentalRestrMemory: "mentalMemory",
    mentalRestrProblem: "mentalProblem",
    mentalProblemSuicide: "mentalCrisisLine",
    mentalCareMedication: "mentalCareExplain",
    mentalCareSupport: "mentalSupport"
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = vision;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function vision() {
    let visionDiagnosis = ``;
    const visionDiagnosisEl = document.getElementById("visionMedicalCondition").value;
    if (visionDiagnosisEl) {
        visionDiagnosis = `I am diagnosed with ${visionDiagnosisEl}`;
    }

    let visionAble = '';
    if (document.getElementById("visionRestrUnable").checked) {
        visionAble = `I am legally blind, with a visual acuity of 20/200 or less with the Snellen Chart or field of vision in both eyes is 20 degrees or less.`;
    }
    let visionDescribe = ``;
    let visionLonger = ``;
    let visionDevice = ``;
    let visionExplain = ``;

    // Explanation of vision restriction
    const visionExplainEl = document.getElementById('visionRestrExplainInput');
    if (visionExplainEl.value) {
        visionExplain = visionExplainEl.value;
    }


    // Frequency of vision restrictions
    const visionLongerEl = document.querySelector('input[name=visionRestrFreq]:checked');
    if (visionLongerEl) {
        visionLonger = `I have significant restrictions in my vision `;
        visionLonger += `${visionLongerEl.nextElementSibling.innerText.toLowerCase()}`;
    }

    // Description of effects
    const visionDescribeEls = document.querySelectorAll('input[name=visionEffects]:checked');
    if (visionDescribeEls.length > 0) {
        visionDescribe = `I experience `;
        let visionDescribes = [];
        for (const wc of visionDescribeEls) {
            visionDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
        }
        visionDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(visionDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("visionTherapyNo").checked) {
        visionDevice = `No therapy, medication or devices corrects my restriction.`;
    }
    if (document.getElementById("visionTherapyYes").checked) {
        //visionDevices
        visionDevice = document.getElementById('visionTherapyExplainInput').value;
    }
        
    const visionBeginSelect = document.getElementById('visionBegin');
    let visionBegin = `My restriction began in ${visionBeginSelect.options[visionBeginSelect.selectedIndex].value}`;

    let visionResolve = ``;
    const visionResolveSelect = document.getElementById('visionResolveYearSelect');
    if (document.getElementById("visionResolveNo").checked) {
        visionResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("visionResolveYes").checked) {
        visionResolve = `My restriction resolved in ${visionResolveSelect.options[visionResolveSelect.selectedIndex].value}`;
    }

    // Compile
    let visionSection = false;

    if (document.getElementById('visionYes').checked) {
        visionSection = true;
        const email = document.getElementById("vision");
        email.innerHTML = `Vision:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const visionArray = [visionDiagnosis, visionAble, visionLonger, visionExplain, visionDescribe, visionDevice, visionBegin, visionResolve];
        for (const w of visionArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
    return visionSection;
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = speech;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function speech() {
    let speechDiagnosis = ``;
    const speechDiagnosisEl = document.getElementById("speechMedicalCondition").value;
    if (speechDiagnosisEl) {
        speechDiagnosis = `I am diagnosed with ${speechDiagnosisEl}`;
    }

    let speechAble = '';
    if (document.getElementById("speechRestrUnable").checked) {
        speechAble = `I am unable to speak and rely on other means of communication, such as sign language or a symbol board, at least 90% of the time.`;
    }
    if (document.getElementById("speechRestrSevere").checked) {
        speechAble = `I take longer to speak so as to be understood by another person familiar with me, in a quiet setting.`;
    }
    let speechDescribe = ``;
    let speechFreq = ``;
    let speechLonger = ``;
    let speechDevice = ``;
    let speechTherapy = ``;
    let speechMedication = ``;

    // Frequency of speech restrictions
    const speechFreqEl = document.querySelector('input[name=speechRestrFreq]:checked');
    if (speechFreqEl) {
        speechFreq = `This happens `;
        speechFreq += `${speechFreqEl.nextElementSibling.innerText.toLowerCase()}`;
    }

    // How much longer it takes them to speak
    const speechLongerEl = document.querySelector('input[name=speechLonger]:checked');
    if (speechLongerEl) {
        speechLonger = `When I speak with my doctor, my doctor must ask me to repeat words and sentences. It takes `;
        speechLonger += `${speechLongerEl.nextElementSibling.innerText.toLowerCase()} to communicate my needs.`;
    }


    // Description of restriction
    const speechDescribeEls = document.querySelectorAll('input[name=speechDescribe]:checked');
    if (speechDescribeEls.length > 0) {
        speechDescribe = `When I speak I suffer from `;
        let speechDescribes = [];
        for (const wc of speechDescribeEls) {
            if (wc.id=="speechDescribeOther") {
                speechDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                speechDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        speechDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(speechDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("speechTherapyNo").checked) {
        speechDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("speechTherapyYes").checked) {
        //speechDevices
        let speechDevices = document.querySelectorAll('input[name=speechDevices]:checked');
        if (speechDevices[0]) {
            let speechDevicesArray = [];
            speechDevice = `I require the use of `;
            for (const wd of speechDevices) {
                if (wd.id == "speechDevicesOther") {
                    speechDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                speechDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            speechDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(speechDevicesArray);
        }

        //speechTherapy
        let speechTherapies = document.querySelectorAll('input[name=speechTherapy]:checked');
        if (speechTherapies[0]) {
            let speechTherapiesArray = [];
            speechTherapy = `I require regular `;
            for (const wt of speechTherapies) {
                if (wt.id == "speechTherapyOther") {
                    speechTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    speechTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            speechTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(speechTherapiesArray);
        }

        //speechMedication
        if (document.getElementById('speechTherapyMedication').checked) {
            speechMedication = `I take ${document.getElementById("speechMedicationInput").value}`;
        }
    }
        
    const speechBeginSelect = document.getElementById('speechBegin');
    let speechBegin = `My restriction began in ${speechBeginSelect.options[speechBeginSelect.selectedIndex].value}`;

    let speechResolve = ``;
    const speechResolveSelect = document.getElementById('speechResolveYearSelect');
    if (document.getElementById("speechResolveNo").checked) {
        speechResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("speechResolveYes").checked) {
        speechResolve = `My restriction resolved in ${speechResolveSelect.options[speechResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('speechYes').checked) {
        const email = document.getElementById("speech");
        email.innerHTML = `Speech:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const speechArray = [speechDiagnosis, speechAble, speechFreq, speechLonger, speechDescribe, speechDevice,  speechTherapy, speechMedication, speechBegin, speechResolve];
        for (const w of speechArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = hearing;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function hearing() {
    let hearingDiagnosis = ``;
    const hearingDiagnosisEl = document.getElementById("hearingMedicalCondition").value;
    if (hearingDiagnosisEl) {
        hearingDiagnosis = `I am diagnosed with ${hearingDiagnosisEl}`;
    }

    let hearingAble = '';
    if (document.getElementById("hearingRestrUnable").checked) {
        hearingAble = `I am deaf/unable to hear and understand another person.`;
    }
    let hearingDescribe = ``;
    let hearingLonger = ``;
    let hearingDevice = ``;
    let hearingTherapy = ``;
    let hearingMedication = ``;

    // How much longer it takes them to speak
    const hearingLongerEl = document.querySelector('input[name=hearingLonger]:checked');
    if (hearingLongerEl) {
        hearingLonger = `I take `;
        hearingLonger += `${hearingLongerEl.nextElementSibling.innerText.toLowerCase()}, to hear and understand another person familiar with me, in a quiet setting.`;
    }


    // Description of restriction
    const hearingDescribeEls = document.querySelectorAll('input[name=hearingDescribe]:checked');
    if (hearingDescribeEls.length > 0) {
        let hearingDescribes = [];
        for (const wc of hearingDescribeEls) {
            if (wc.id=="hearingDescribeOther") {
                hearingDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                hearingDescribes.push(wc.nextElementSibling.innerText.toLowerCase().replace(/i\s/g, "I "));
            }
        }
        hearingDescribe = Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(hearingDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("hearingTherapyNo").checked) {
        hearingDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("hearingTherapyYes").checked) {
        //hearingDevices
        let hearingDevices = document.querySelectorAll('input[name=hearingDevices]:checked');
        if (hearingDevices[0]) {
            let hearingDevicesArray = [];
            hearingDevice = `I require the use of `;
            for (const wd of hearingDevices) {
                if (wd.id == "hearingDevicesOther") {
                    hearingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                hearingDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            hearingDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(hearingDevicesArray);
        }

        //hearingTherapy
        let hearingTherapies = document.querySelectorAll('input[name=hearingTherapy]:checked');
        if (hearingTherapies[0]) {
            let hearingTherapiesArray = [];
            hearingTherapy = `I require regular `;
            for (const wt of hearingTherapies) {
                if (wt.id == "hearingTherapyOther") {
                    hearingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    hearingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            hearingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(hearingTherapiesArray);
        }

        //hearingMedication
        if (document.getElementById('hearingTherapyMedication').checked) {
            hearingMedication = `I take ${document.getElementById("hearingMedicationInput").value}`;
        }
    }
        
    const hearingBeginSelect = document.getElementById('hearingBegin');
    let hearingBegin = `My restriction began in ${hearingBeginSelect.options[hearingBeginSelect.selectedIndex].value}`;

    let hearingResolve = ``;
    const hearingResolveSelect = document.getElementById('hearingResolveYearSelect');
    if (document.getElementById("hearingResolveNo").checked) {
        hearingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("hearingResolveYes").checked) {
        hearingResolve = `My restriction resolved in ${hearingResolveSelect.options[hearingResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('hearingYes').checked) {
        const email = document.getElementById("hearing");
        email.innerHTML = `Hearing:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const hearingArray = [hearingDiagnosis, hearingAble, hearingLonger, hearingDescribe, hearingDevice,  hearingTherapy, hearingMedication, hearingBegin, hearingResolve];
        for (const w of hearingArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = eliminating;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function eliminating() {
    let elimDiagnosis = ``;
    const elimDiagnosisEl = document.getElementById("elimMedicalCondition").value;
    if (elimDiagnosisEl) {
        elimDiagnosis = `I am diagnosed with ${elimDiagnosisEl}`;
    }

    let elimAble = '';
    if (document.getElementById("elimRestrUnable").checked) {
        elimAble = `I am incontinent and unable to manage my elimination.`;
    }
    let elimDescribe = ``;
    let elimLonger = ``;
    let elimFreq = ``;
    let elimDevice = ``;
    let elimTherapy = ``;
    let elimMedication = ``;

    // How much longer it takes them to speak
    const elimLongerEl = document.querySelector('input[name=elimLonger]:checked');
    if (elimLongerEl) {
        elimLonger = `I take `;
        elimLonger += `${elimLongerEl.nextElementSibling.innerText.toLowerCase()}, to manage my elimination.`;
    }

    // Frequency of restrictions
    const elimFreqEl = document.querySelector('input[name=elimRestrFreq]:checked');
    if (elimFreqEl) {
        elimFreq = `This happens `;
        elimFreq += `${elimFreqEl.nextElementSibling.innerText.toLowerCase()}`;
    }


    // Description of restriction
    const elimDescribeEls = document.querySelectorAll('input[name=elimDescribe]:checked');
    if (elimDescribeEls.length > 0) {
        elimDescribe = `I have the following: `;
        let elimDescribes = [];
        for (const wc of elimDescribeEls) {
            if (wc.id=="elimDescribeOther") {
                elimDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                elimDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        elimDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(elimDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("elimTherapyNo").checked) {
        elimDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("elimTherapyYes").checked) {
        //elimDevices
        let elimDevices = document.querySelectorAll('input[name=elimDevices]:checked');
        if (elimDevices[0]) {
            let elimDevicesArray = [];
            elimDevice = `I require the use of `;
            for (const wd of elimDevices) {
                if (wd.id == "elimDevicesOther") {
                    elimDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                elimDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            elimDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(elimDevicesArray);
        }

        //elimTherapy
        let elimTherapies = document.querySelectorAll('input[name=elimTherapy]:checked');
        if (elimTherapies[0]) {
            let elimTherapiesArray = [];
            elimTherapy = `I require regular `;
            for (const wt of elimTherapies) {
                if (wt.id == "elimTherapyOther") {
                    elimTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    elimTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            elimTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(elimTherapiesArray);
        }

        //elimMedication
        if (document.getElementById('elimTherapyMedication').checked) {
            elimMedication = `I take ${document.getElementById("elimMedicationInput").value}`;
        }
    }
        
    const elimBeginSelect = document.getElementById('elimBegin');
    let elimBegin = `My restriction began in ${elimBeginSelect.options[elimBeginSelect.selectedIndex].value}`;

    let elimResolve = ``;
    const elimResolveSelect = document.getElementById('elimResolveYearSelect');
    if (document.getElementById("elimResolveNo").checked) {
        elimResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("elimResolveYes").checked) {
        elimResolve = `My restriction resolved in ${elimResolveSelect.options[elimResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('elimYes').checked) {
        const email = document.getElementById("eliminating");
        email.innerHTML = `Eliminating:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const elimArray = [elimDiagnosis, elimAble, elimLonger, elimFreq, elimDescribe, elimDevice,  elimTherapy, elimMedication, elimBegin, elimResolve];
        for (const w of elimArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = walking;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function walking() {
    let walkingDiagnosis = ``;
    const walkingDiagnosisEl = document.getElementById("walkingMedicalCondition").value;
    if (walkingDiagnosisEl) {
        walkingDiagnosis = `I am diagnosed with ${walkingDiagnosisEl}`;
    }

    let walkingAble = '';
    if (document.getElementById("walkingRestrUnable").checked) {
        walkingAble = `I am unable to walk`;
    }
    let walkingDescribe = ``;
    let walkingLonger = ``;
    let walkingFreq = ``;
    let walkingDevice = ``;
    let walkingTherapy = ``;
    let walkingMedication = ``;

    // Walking restrictions
    const walkingRestrEls = document.querySelectorAll('input[name=walkingRestr]:checked');
    if (walkingRestrEls.length > 0) {
        let walkingRestrictions = [];
        walkingAble = `I am restricted in `;
        for (const wr of walkingRestrEls) {
            if (wr.id=="walkingRestrOther") {
                walkingRestrictions.push(wr.nextElementSibling.nextElementSibling.value);
            } else {
                walkingRestrictions.push(letterText[wr.id]);
            }
        }
        walkingAble += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingRestrictions);
    }

    // Causes of restriction
    const walkingDescribeEls = document.querySelectorAll('input[name=walkingDescribe]:checked');
    if (walkingDescribeEls.length > 0) {
        walkingDescribe = `I am restricted by `;
        let walkingDescribes = [];
        for (const wc of walkingDescribeEls) {
            if (wc.id=="walkingDescribeOther") {
                walkingDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                walkingDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        walkingDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingDescribes);
    }

    // How much longer it takes them to walk
    const walkingLongerEl = document.querySelector('input[name=walkingLonger]:checked');
    if (walkingLongerEl) {
        walkingLonger = `I require`;
        walkingLonger += `${walkingLongerEl.nextElementSibling.innerText.substring('I take'.length)} to walk a flight of stairs or one block compared to an average person my age without my condition`;
    }

    // How frequently they have to stop and rest
    if (document.querySelector('input[name=walkingFreq]:checked')) {
        walkingFreq = `I need to stop and rest`;
        walkingFreq += ` ${document.querySelector('input[name=walkingFreq]:checked').nextElementSibling.innerText.toLowerCase()} while walking`;
    }

    // Use of therapy, medication or devices
    if (document.getElementById("walkingTherapyYes").checked) {
        //walkingDevices
        let walkingDevices = document.querySelectorAll('input[name=walkingDevices]:checked');
        if (walkingDevices[0]) {
            let walkingDevicesArray = [];
            walkingDevice = `I require the use of `;
            for (const wd of walkingDevices) {
                if (wd.id == "walkingDevicesOther") {
                    walkingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                walkingDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            walkingDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingDevicesArray);
        }

        //walkingTherapy
        let walkingTherapies = document.querySelectorAll('input[name=walkingTherapy]:checked');
        if (walkingTherapies[0]) {
            let walkingTherapiesArray = [];
            walkingTherapy = `I require regular `;
            for (const wt of walkingTherapies) {
                if (wt.id == "walkingTherapyOther") {
                    walkingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    walkingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            walkingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(walkingTherapiesArray);
        }

        //walkingMedication
        if (document.getElementById('walkingTherapyMedication').checked) {
            walkingMedication = `I take ${document.getElementById("walkingMedicationInput").value}`;
        }
    }
        
    const walkingBeginSelect = document.getElementById('walkingBegin');
    let walkingBegin = `My restriction began in ${walkingBeginSelect.options[walkingBeginSelect.selectedIndex].value}`;

    let walkingResolve = ``;
    const walkingResolveSelect = document.getElementById('walkingResolveYearSelect');
    if (document.getElementById("walkingResolveNo").checked) {
        walkingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("walkingResolveYes").checked) {
        walkingResolve = `My restriction resolved in ${walkingResolveSelect.options[walkingResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('walkingYes').checked) {
        const email = document.getElementById("walking");
        email.innerHTML = `Walking:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const walkingArray = [walkingDiagnosis, walkingAble, walkingDescribe, walkingLonger, walkingFreq, walkingDevice,  walkingTherapy, walkingMedication, walkingBegin, walkingResolve];
        for (const w of walkingArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

//key is id of selected option, value is text to display
const letterText = {
        walkingRestrSlow: "walking slowly",
        walkingRestrRest: "needing to stop and rest frequently",
        walkingRestrStairs: "walking up/down stairs",
        walkingRestrIncline: "walking up/down inclines",
    }

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = feeding;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function feeding() {
    let feedingDiagnosis = ``;
    const feedingDiagnosisEl = document.getElementById("feedingMedicalCondition").value;
    if (feedingDiagnosisEl) {
        feedingDiagnosis = `I am diagnosed with ${feedingDiagnosisEl}`;
    }

    let feedingAble = '';
    if (document.getElementById("eatingRestrUnable").checked) {
        feedingAble = `I am unable to eat regular meals.`;
    }
    if (document.getElementById("prepareRestrUnable").checked) {
        feedingAble = `I am unable to prepare a meal.`;
    }

    // Eating
    let eatingDescribe = ``;
    let eatingLonger = ``;
    let eatingDevice = ``;
    let eatingTherapy = ``;
    let eatingMedication = ``;
    let eatingBegin = ``;
    let eatingUnableBegin = ``;

    // How much longer it takes
    const eatingLongerEl = document.querySelector('input[name=eatingLonger]:checked');
    if (eatingLongerEl) {
        if (document.getElementById('eatingLongerUnable').checked) {
            eatingLonger = `I am unable to eat without assistance.`
        } else {
            eatingLonger = `I take `;
            eatingLonger += `${eatingLongerEl.nextElementSibling.innerText.toLowerCase()} to eat.`;
        }
    }


    // Description of restriction
    const eatingDescribeEls = document.querySelectorAll('input[name=eatingDescribe]:checked');
    if (eatingDescribeEls.length > 0) {
        eatingDescribe = `I experience the following effects while eating: `;
        let eatingDescribes = [];
        for (const wc of eatingDescribeEls) {
            if (wc.id=="eatingDescribeOther") {
                eatingDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                eatingDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        eatingDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(eatingDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("eatingTherapyNo").checked) {
        eatingDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("eatingTherapyYes").checked) {
        //eatingDevices
        let eatingDevices = document.querySelectorAll('input[name=eatingDevices]:checked');
        if (eatingDevices[0]) {
            let eatingDevicesArray = [];
            for (const wd of eatingDevices) {
                if (wd.id == "eatingDevicesOther") {
                    eatingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                eatingDevicesArray.push(wd.nextElementSibling.innerText);
                }
            }
            eatingDevice = Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(eatingDevicesArray);
        }

        //eatingTherapy
        let eatingTherapies = document.querySelectorAll('input[name=eatingTherapy]:checked');
        if (eatingTherapies[0]) {
            let eatingTherapiesArray = [];
            eatingTherapy = `I require regular `;
            for (const wt of eatingTherapies) {
                if (wt.id == "eatingTherapyOther") {
                    eatingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    eatingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            eatingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(eatingTherapiesArray);
        }

        //eatingMedication
        if (document.getElementById('eatingTherapyMedication').checked) {
            eatingMedication = `I take ${document.getElementById("eatingMedicationInput").value}`;
        }
    }

    // eating restriction began   
    if (document.getElementById('eatingRestrSevere').checked) {
        const eatingBeginSelect = document.getElementById('eatingBegin');
        eatingBegin = `My restriction began in ${eatingBeginSelect.options[eatingBeginSelect.selectedIndex].value}`;
    }

    if (document.getElementById("eatingRestrUnable").checked) {
        const eatingBeginUnableSelect = document.getElementById('eatingUnableBegin');
        eatingUnableBegin = `My restriction began in ${eatingBeginUnableSelect.options[eatingBeginUnableSelect.selectedIndex].value}`;
    }

    // eating restriction resolved
    let eatingResolve = ``;
    const eatingResolveSelect = document.getElementById('eatingResolveYearSelect');
    if (document.getElementById("eatingResolveNo").checked) {
        eatingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("eatingResolveYes").checked) {
        eatingResolve = `My restriction resolved in ${eatingResolveSelect.options[eatingResolveSelect.selectedIndex].value}`;
    }

    let eatingUnableResolve = ``;
    const eatingResolveUnableSelect = document.getElementById('eatingResolveYearUnableSelect');
    if (document.getElementById("eatingResolveUnableNo").checked) {
        eatingUnableResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("eatingResolveUnableYes").checked) {
        eatingUnableResolve = `My restriction resolved in ${eatingResolveUnableSelect.options[eatingResolveUnableSelect.selectedIndex].value}`;
    }

    // Preparing
    let preparingDescribe = ``;
    let preparingLonger = ``;
    let preparingDevice = ``;
    let preparingTherapy = ``;
    let preparingMedication = ``;
    let preparingBegin = ``;
    let preparingUnableBegin = ``;
    let preparingDifficulties = ``;

    // How much longer it takes
    const preparingLongerEl = document.querySelector('input[name=preparingLonger]:checked');
    if (preparingLongerEl) {
        if (document.getElementById('preparingLongerUnable').checked) {
            preparingLonger = `I am unable to prepare food without assistance.`
        } else {
            preparingLonger = `I take `;
            preparingLonger += `${preparingLongerEl.nextElementSibling.innerText.toLowerCase()} to prepare food.`;
        }
    }


    // Difficulties/Effects
    const preparingDifficultiesEls = document.querySelectorAll('input[name=preparingEffects]:checked');
    if (preparingDifficultiesEls.length > 0) {
        preparingDifficulties = `I find the following activities difficult: `;
        let preparingDifficultiess = [];
        for (const wc of preparingDifficultiesEls) {
            preparingDifficultiess.push(wc.nextElementSibling.innerText.toLowerCase());
        }
        preparingDifficulties += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(preparingDifficultiess);
    }

    // Description of restriction
    const preparingDescribeEls = document.querySelectorAll('input[name=preparingDescribe]:checked');
    if (preparingDescribeEls.length > 0) {
        preparingDescribe = `I experience the following effects while preparing food: `;
        let preparingDescribes = [];
        for (const wc of preparingDescribeEls) {
            if (wc.id=="preparingDescribeOther") {
                preparingDescribes.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                preparingDescribes.push(wc.nextElementSibling.innerText.toLowerCase());
            }
        }
        preparingDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(preparingDescribes);
    }


    // Use of therapy, medication or devices
    if (document.getElementById("preparingTherapyNo").checked) {
        preparingDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("preparingTherapyYes").checked) {
        // PreparingDevices
        let preparingDevices = document.querySelectorAll('input[name=preparingDevices]:checked');
        if (preparingDevices[0]) {
            let preparingDevicesArray = [];
            preparingDevice = `I require the use of `;
            for (const wd of preparingDevices) {
                if (wd.id == "preparingDevicesOther") {
                    preparingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                preparingDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            preparingDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(preparingDevicesArray);
        }

        // PreparingTherapy
        let preparingTherapies = document.querySelectorAll('input[name=preparingTherapy]:checked');
        if (preparingTherapies[0]) {
            let preparingTherapiesArray = [];
            preparingTherapy = `I require regular `;
            for (const wt of preparingTherapies) {
                if (wt.id == "preparingTherapyOther") {
                    preparingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    preparingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            preparingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(preparingTherapiesArray);
        }

        // PreparingMedication
        if (document.getElementById('preparingTherapyMedication').checked) {
            preparingMedication = `I take ${document.getElementById("preparingMedicationInput").value}`;
        }
    }
     
    // Preparing restriction began   
    if (document.getElementById('prepareRestrSevere').checked) {
        const preparingBeginSelect = document.getElementById('preparingBegin');
        preparingBegin = `My restriction began in ${preparingBeginSelect.options[preparingBeginSelect.selectedIndex].value}`;
    }

    if (document.getElementById("prepareRestrUnable").checked) {
        const preparingBeginUnableSelect = document.getElementById('preparingUnableBegin');
        preparingUnableBegin = `My restriction began in ${preparingBeginUnableSelect.options[preparingBeginUnableSelect.selectedIndex].value}`;
    }

    // Preparing restriction resolved
    let preparingResolve = ``;
    const preparingResolveSelect = document.getElementById('preparingResolveYearSelect');
    if (document.getElementById("preparingResolveNo").checked) {
        preparingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("preparingResolveYes").checked) {
        preparingResolve = `My restriction resolved in ${preparingResolveSelect.options[preparingResolveSelect.selectedIndex].value}`;
    }

    let preparingUnableResolve = ``;
    const preparingResolveUnableSelect = document.getElementById('preparingResolveYearUnableSelect');
    if (document.getElementById("preparingResolveUnableNo").checked) {
        preparingUnableResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("preparingResolveUnableYes").checked) {
        preparingUnableResolve = `My restriction resolved in ${preparingResolveUnableSelect.options[preparingResolveUnableSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('feedingYes').checked) {
        const email = document.getElementById("feeding");
        email.innerHTML = `Feeding:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const feedingArray = [feedingDiagnosis, feedingAble, eatingLonger, eatingDescribe, eatingDevice,  eatingTherapy, eatingMedication, eatingBegin, eatingResolve, eatingUnableBegin, eatingUnableResolve, preparingLonger, preparingDescribe, preparingDevice, preparingDifficulties, preparingTherapy, preparingMedication, preparingBegin, preparingUnableBegin, preparingResolve, preparingUnableResolve];
        for (const w of feedingArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = dressing;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function dressing() {
    let dressingDiagnosis = ``;
    const dressingDiagnosisEl = document.getElementById("dressingMedicalCondition").value; 
    if (dressingDiagnosisEl) {
        dressingDiagnosis = `I am diagnosed with ${dressingDiagnosisEl}`;
    }

    let dressingAble = ``;
    if (document.getElementById("dressingRestrUnable").checked) {
        dressingAble = `I am unable to dress without assistance`;
    }
    let dressingRestr = ``;
    let dressingDescribe = ``;
    let dressingDifficult = ``;
    let dressingDevice = ``;
    let dressingTherapy = ``;
    let dressingMedication = ``;
    
    // Dressing restrictions
    const dressingRestrEl = document.querySelector('input[name=dressingRestr]:checked');
    if (dressingRestrEl) {
        dressingRestr = `I require `;
        dressingRestr += `${dressingRestrEl.nextElementSibling.innerText.substring('I take'.length)} to dress`;
    }

    // Cause of restriction
    const dressingRestrEls = document.querySelectorAll('input[name=dressingDescribe]:checked');
    if (dressingRestrEls.length > 0) {
        dressingDescribe = `I am restricted by `;
        let dressingDescribes = [];
        for (const dd of document.querySelectorAll('input[name=dressingDescribe]:checked')) {
            dressingDescribes.push(dd.nextElementSibling.innerText.toLowerCase());
        }
        dressingDescribe += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingDescribes);
    }

    // What is difficult
    const dressingDifficultEls = document.querySelectorAll('input[name=dressingDifficult]:checked');
    if (dressingDifficultEls.length > 0) {
        dressingDifficult = `I have difficulty putting on the following articles of clothing: `
        let dressingDifficults = [];
        for (const dd of document.querySelectorAll('input[name=dressingDifficult]:checked')) {
            dressingDifficults.push(dd.nextElementSibling.innerText.toLowerCase());
        }
        dressingDifficult += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingDifficults);
    }

    // Use of therapy, medication or devices
    if (document.getElementById("dressingTherapyNo").checked) {
        dressingDevice = `No therapy, medication or devices corrects my restriction.`;
    }

    if (document.getElementById("dressingTherapyYes").checked) {
        //dressingDevices
        let dressingDevices = document.querySelectorAll('input[name=dressingDevices]:checked');
        if (dressingDevices[0]) {
            let dressingDevicesArray = [];
            dressingDevice = `I require the use of `;
            for (const wd of dressingDevices) {
                if (wd.id == "dressingDevicesOther") {
                    dressingDevicesArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                dressingDevicesArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            dressingDevice += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingDevicesArray);
        }

        //dressingTherapy
        let dressingTherapies = document.querySelectorAll('input[name=dressingTherapy]:checked');
        if (dressingTherapies[0]) {
            let dressingTherapiesArray = [];
            dressingTherapy = `I require regular `;
            for (const wt of dressingTherapies) {
                if (wt.id == "dressingTherapyOther") {
                    dressingTherapiesArray.push(wt.nextElementSibling.nextElementSibling.value);
                } else {
                    dressingTherapiesArray.push(wt.nextElementSibling.innerText.toLowerCase());
                }
            }
            dressingTherapy += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(dressingTherapiesArray);
        }

        //dressingMedication
        if (document.getElementById('dressingTherapyMedication').checked) {
            dressingMedication = `I takes ${document.getElementById("dressingMedicationInput").value}`;
        }
    }

    const dressingBeginSelect = document.getElementById('dressingBegin');
    let dressingBegin = `My restriction began in ${dressingBeginSelect.options[dressingBeginSelect.selectedIndex].value}`;

    let dressingResolve = ``;
    const dressingResolveSelect = document.getElementById('dressingResolveYearSelect');
    if (document.getElementById("dressingResolveNo").checked) {
        dressingResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("dressingResolveYes").checked) {
        dressingResolve = `My restriction resolved in ${dressingResolveSelect.options[dressingResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('dressingYes').checked) {
        const email = document.getElementById("dressing");
        email.innerHTML = `Dressing:`;
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const dressingArray = [dressingDiagnosis, dressingAble, dressingRestr, dressingDescribe, dressingDifficult, dressingDevice,  dressingTherapy, dressingMedication, dressingBegin, dressingResolve];
        for (const d of dressingArray) {
            if (d) {
                const li = document.createElement("li");
                li.innerHTML = d;
                ul.appendChild(li);
            }
        }
    }
};

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mental;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function mental() {
    let mentalDiagnosis = ``;
    const mentalDiagnosisEl = document.getElementById("mentalMedicalCondition").value;
    if (mentalDiagnosisEl) {
        mentalDiagnosis = `I am diagnosed with ${mentalDiagnosisEl}`;
    }

    let mentalCare = ``;
    let mentalSelf = ``;
    let mentalSocial = ``;
    let mentalTransactions = ``;
    let mentalMemory = ``;
    let mentalProblem = ``;
    let mentalMedication = ``;

    // Self Care
    const mentalSelfEls = document.querySelectorAll('input[name=mentalSelf]:checked');
    if (mentalSelfEls.length > 0) {
        mentalSelf = `In regards to self care tasks such as getting dressed, brushing teeth, showering, eating and other personal care acts: `;
        let mentalSelves = [];
        for (const wc of mentalSelfEls) {
            if (wc.id=="mentalSelfOther") {
                mentalSelves.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                mentalSelves.push(wc.nextElementSibling.innerText);
            }
        }
        mentalSelf += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(mentalSelves);
    }

    // Social
    const mentalSocialEls = document.querySelectorAll('input[name=mentalSocial]:checked');
    if (mentalSocialEls.length > 0) {
        mentalSocial = `Social interations: `;
        let mentalSocials = [];
        for (const wc of mentalSocialEls) {
            if (wc.id=="mentalSocialOther") {
                mentalSocials.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                mentalSocials.push(wc.nextElementSibling.innerText);
            }
        }
        mentalSocial += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(mentalSocials);
    }

    // Transactions
    const mentalTransactionsEls = document.querySelectorAll('input[name=mentalTransactions]:checked');
    if (mentalTransactionsEls.length > 0) {
        mentalTransactions = `Transactions: `;
        let mentalTransactionsArray = [];
        for (const wc of mentalTransactionsEls) {
            if (wc.id=="mentalTransactionsOther") {
                mentalTransactionsArray.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                mentalTransactionsArray.push(wc.nextElementSibling.innerText);
            }
        }
        mentalTransactions += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(mentalTransactionsArray);
    }

    // Memory
    const mentalMemoryEls = document.querySelectorAll('input[name=mentalMemory]:checked');
    if (mentalMemoryEls.length > 0) {
        mentalMemory = `Memory: `;
        let mentalMemoryArray = [];
        for (const wc of mentalMemoryEls) {
            if (wc.id=="mentalMemoryOther") {
                mentalMemoryArray.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                mentalMemoryArray.push(wc.nextElementSibling.innerText);
            }
        }
        mentalMemory += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(mentalMemoryArray);
    }

    // Problem
    const mentalProblemEls = document.querySelectorAll('input[name=mentalProblem]:checked');
    if (mentalProblemEls.length > 0) {
        mentalProblem = `Problem-solving/goal-setting/judgement: `;
        let mentalProblemArray = [];
        for (const wc of mentalProblemEls) {
            if (wc.id=="mentalProblemOther") {
                mentalProblemArray.push(wc.nextElementSibling.nextElementSibling.value);
            } else {
                mentalProblemArray.push(wc.nextElementSibling.innerText);
            }
        }
        mentalProblem += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(mentalProblemArray);
    }

    // Use of support or medication
    if (document.getElementById("mentalCareNo").checked) {
        mentalCare = `I do not receive any care from a mental health specialist or take any medication to assist me.`;
    } else {
        let mentalSupports = document.querySelectorAll('input[name=mentalSupport]:checked');
        if (mentalSupports[0]) {    
            let mentalSupportsArray = [];
            mentalCare = `I receive support from mental health specialists including a `;
            for (const wd of mentalSupports) {
                if (wd.id == "mentalDevicesOther") {
                    mentalSupportsArray.push(wd.nextElementSibling.nextElementSibling.value);
                } else {
                mentalSupportsArray.push(wd.nextElementSibling.innerText.toLowerCase());
                }
            }
            mentalCare += Object(__WEBPACK_IMPORTED_MODULE_0_array_to_sentence__["a" /* default */])(mentalSupportsArray);
        }
        //mentalMedication
        if (document.getElementById('mentalCareMedication').checked) {
            mentalMedication = `I take the following medications: ${document.getElementById("mentalCareExplainInput").value}`;
        }
    }

    const mentalBeginSelect = document.getElementById('mentalBegin');
    let mentalBegin = `My restriction began in ${mentalBeginSelect.options[mentalBeginSelect.selectedIndex].value}`;

    let mentalResolve = ``;
    const mentalResolveSelect = document.getElementById('mentalResolveYearSelect');
    if (document.getElementById("mentalResolveNo").checked) {
        mentalResolve = `My restriction is ongoing`;
    }
    if (document.getElementById("mentalResolveYes").checked) {
        mentalResolve = `My restriction resolved in ${mentalResolveSelect.options[mentalResolveSelect.selectedIndex].value}`;
    }

    // Compile
    if (document.getElementById('mentalYes').checked) {
        const email = document.getElementById("mental");
        email.innerHTML = `Mental Functions:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const mentalArray = [mentalDiagnosis, mentalSelf, mentalSocial, mentalTransactions, mentalMemory, mentalProblem, mentalCare, mentalMedication, mentalBegin, mentalResolve];
        for (const w of mentalArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = life;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_array_to_sentence__ = __webpack_require__(0);


function life() {
    let lifeDiagnosis = ``;
    let lifeTherapy = ``;
    let lifeAverage = ``;
    let lifeFreq = ``;
    let lifeLength = ``;
    let lifeBegin = ``;
    let lifeFreqVal = ``;
    let lifeLengthVal = ``;

    const lifeDiagnosisEl = document.getElementById("lifeMedicalCondition").value;
    if (lifeDiagnosisEl) {
        lifeDiagnosis = `I am diagnosed with ${lifeDiagnosisEl}`;
    }

    const lifeTherapyEl = document.getElementById("lifeTherapy").value;
    if (lifeTherapyEl) {
        lifeTherapy = `I require ${lifeTherapyEl}`;

        const lifeFreqEls = document.querySelectorAll('input[name=lifeFreq]:checked');
        if (lifeFreqEls.length > 0) {
            lifeFreqVal = lifeFreqEls[0].nextElementSibling.innerText.toLowerCase();
            lifeFreq = `I receive ${lifeTherapyEl} ${lifeFreqVal}.`
        }

        const lifeLengthEls = document.querySelectorAll('input[name=lifeLength]:checked');
        if (lifeLengthEls.length > 0) {
            lifeLengthVal = lifeLengthEls[0].nextElementSibling.innerText.toLowerCase();
            lifeLength = `On an average day when I am scheduled to receive therapy it takes me ${lifeLengthVal} to manage.`
        }

        if (lifeFreqEls[0] && lifeLengthEls[0]) {
            const lifeBeginSelect = document.getElementById('lifeBegin');
            lifeBegin = `I began requiring this therapy ${lifeFreqVal.substring('At least'.length)} for ${lifeLengthVal} a day in ${lifeBeginSelect.options[lifeBeginSelect.selectedIndex].value}`;
        }

    }

    if (document.getElementById("lifeTherapy14No").checked) {
        lifeAverage = `I require less than 14 hours of therapy every week on average.`
    }
    if (document.getElementById("lifeTherapy14Yes").checked) {
        lifeAverage = `I require at least 14 hours of therapy every week.`
    }

    // Compile
    if (document.getElementById('lifeYes').checked) {
        const email = document.getElementById("life");
        email.innerHTML = `Life Sustaining Therapy:`
        const ul = document.createElement('ul');
        email.appendChild(ul);
        const lifeArray = [lifeDiagnosis, lifeTherapy, lifeAverage, lifeFreq, lifeLength, lifeBegin];
        for (const w of lifeArray) {
            if (w) {
                const li = document.createElement("li");
                li.innerHTML = w;
                ul.appendChild(li);
            }
        }
    }
}

/***/ })
/******/ ]);