/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

document.addEventListener("DOMContentLoaded", function(e) {
    const accordions = document.getElementsByClassName("accordion");

    for (const acc of accordions) {
        acc.onclick = function(){
            /* Toggle between adding and removing the "active" class,
            to highlight the button that controls the panel */
            this.classList.toggle("active");

            /* Toggle between hiding and showing the active panel */
            const panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        }
    }

    document.addEventListener('change', function(event) {
        if (event.target.type == "radio") {
            showAndHideRadioTargets();
        }
        if (event.target.type == "checkbox") {
            const id = event.target.id;
            if (event.target.checked) {
                document.querySelector(`#${checkboxTriggers[id]}`).removeAttribute("hidden");
                const value = [`${event.target.name}`, `${event.target.value}`];
            } else {
                document.querySelector(`#${checkboxTriggers[id]}`).setAttribute("hidden", true);
            }
        }
    })

    const submitButton = document.querySelector("#submit");
    submitButton.onclick = function() {
        const visionMedicalConditionVal = document.getElementById("visionMedicalCondition").value
        const visionMedicalCondition = visionMedicalConditionVal ? `The patient has the following medical conditions that restict his/her vision: ${visionMedicalConditionVal}. ` : "";
        const visionRestr = `The patient is ${document.querySelector("input[name=visionRestr]:checked").value == "legallyBlind" ? "legally blind" : `not legally blind but has the following restrictions: ${document.getElementById("visionRestrExplainInput").value}`}`
        console.log(`Vision: ${visionMedicalCondition}${visionRestr} `);
    }

    function showAndHideRadioTargets() {
        for (const [target, trigger] of Object.entries(radioTriggers)) {
            const targetEl = document.querySelector(`#${target}`);
            const triggerEl = document.querySelector(`input[name=${trigger[0]}]:checked`);
            if (triggerEl && triggerEl.value==`${trigger[1]}`) {
                targetEl.removeAttribute("hidden");
            } else {
                targetEl.setAttribute("hidden", true);
                for (const s of targetEl.querySelectorAll('input')) {
                    // clear target selection when trigger not selected
                    s.checked = false;
                }
            }
        }
    }
}, false);

// key is id of target element, value is array of trigger elements [name, value]
const radioTriggers = {
    visionRestrExplain: ["visionRestr", "severeRestr"],
    visionSevereRestrictionFreq: ["visionRestr", "severeRestr"],
    visionTherapyExplain: ["visionTherapy", "yes"],
    visionResolveYear: ["visionResolve", "yes"],
    speechSevereRestrFreq: ["speechRestr", "severeRestr"],
    speechTherapyAssist: ["speechTherapyYesNo", "yes"],
    speechResolveYear: ["speechResolve", "yes"],
    hearingSevereRestrFreq: ["hearingRestr", "severeRestr"]
}

// key is id of target element, value is id of trigger element
const checkboxTriggers = {
    speechTherapyDevices: "speechDevices",
    speechTherapyTherapy: "speechTherapy",
    speechTherapyMedication: "speechMedication"
}


/***/ })
/******/ ]);